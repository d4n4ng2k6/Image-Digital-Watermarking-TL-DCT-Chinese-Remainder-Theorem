/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Thesis;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.opencv.core.Core;
import static org.opencv.core.Core.BORDER_CONSTANT;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfInt;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.imgcodecs.Imgcodecs;

/**
 *
 * @author ASUS A46CB
 */
public class FormUtama extends javax.swing.JFrame {

    /**
     * Creates new form FormUtama
     */
    double  PrePSNR;
    private Mat [] MatRec; 
     Mat Image,Pre,Emb,Ext,Dec,Rec;
     String BitSize,Key;
     MiscFile MF = new MiscFile();
    static{System.loadLibrary(Core.NATIVE_LIBRARY_NAME);}
    public FormUtama() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LoadBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        LogTxt = new javax.swing.JTextArea();
        Preprocessing = new javax.swing.JButton();
        GenBtn = new javax.swing.JButton();
        EmbedBtn = new javax.swing.JButton();
        SaveBtn = new javax.swing.JButton();
        LoadEmbBtn = new javax.swing.JButton();
        WatExtBtn = new javax.swing.JButton();
        CalcPSNR = new javax.swing.JButton();
        PSNRTxt = new javax.swing.JTextField();
        DetectionBtn = new javax.swing.JButton();
        SaveExtraction = new javax.swing.JButton();
        SaveRecovery = new javax.swing.JButton();
        NCCBtn = new javax.swing.JButton();
        NCCTxt = new javax.swing.JTextField();
        DetBtn = new javax.swing.JButton();
        DetTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LoadBtn.setText("Load Image");
        LoadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadBtnActionPerformed(evt);
            }
        });

        LogTxt.setColumns(20);
        LogTxt.setRows(5);
        jScrollPane1.setViewportView(LogTxt);

        Preprocessing.setText("Preprocessing");
        Preprocessing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PreprocessingActionPerformed(evt);
            }
        });

        GenBtn.setText("Generate Watermark");
        GenBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenBtnActionPerformed(evt);
            }
        });

        EmbedBtn.setText("Embedding");
        EmbedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmbedBtnActionPerformed(evt);
            }
        });

        SaveBtn.setText("Save Image");
        SaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveBtnActionPerformed(evt);
            }
        });

        LoadEmbBtn.setText("Load Embedded Image");
        LoadEmbBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadEmbBtnActionPerformed(evt);
            }
        });

        WatExtBtn.setText("Watermark Extraction");
        WatExtBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WatExtBtnActionPerformed(evt);
            }
        });

        CalcPSNR.setText("Calculate PSNR");
        CalcPSNR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalcPSNRActionPerformed(evt);
            }
        });

        DetectionBtn.setText(" Recovery");
        DetectionBtn.setEnabled(false);
        DetectionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DetectionBtnActionPerformed(evt);
            }
        });

        SaveExtraction.setText("Save Image");
        SaveExtraction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveExtractionActionPerformed(evt);
            }
        });

        SaveRecovery.setText("Save Image");
        SaveRecovery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveRecoveryActionPerformed(evt);
            }
        });

        NCCBtn.setText("Calculate NCC");
        NCCBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NCCBtnActionPerformed(evt);
            }
        });

        DetBtn.setText("Detection");
        DetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DetBtnActionPerformed(evt);
            }
        });

        DetTxt.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(NCCBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(EmbedBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(GenBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LoadBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CalcPSNR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(PSNRTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                            .addComponent(NCCTxt))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Preprocessing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SaveBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(160, 160, 160)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(DetectionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(WatExtBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(LoadEmbBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(SaveExtraction, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                                        .addGap(11, 11, 11))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(SaveRecovery, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addContainerGap())))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(DetBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DetTxt)
                                .addGap(11, 11, 11))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LoadBtn)
                    .addComponent(Preprocessing)
                    .addComponent(LoadEmbBtn)
                    .addComponent(SaveRecovery))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GenBtn)
                    .addComponent(WatExtBtn)
                    .addComponent(SaveExtraction))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DetTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(EmbedBtn)
                                .addComponent(SaveBtn))
                            .addComponent(DetBtn))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DetectionBtn)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PSNRTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CalcPSNR))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NCCTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NCCBtn))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    TwoLevDCTGenerate[] TLDC =null;
            
    private void LoadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadBtnActionPerformed
        // TODO add your handling code here:
        // Load Image, dengan memanfaatkan kelas ImageViewer
        final JFileChooser JF = new JFileChooser();
        JF.addChoosableFileFilter(new TextFilter());
        int returnval = JF.showOpenDialog(FormUtama.this);
        if (returnval == JFileChooser.APPROVE_OPTION)
        {
            File file  = JF.getSelectedFile();
            String Path = file.getPath();
            Image = Imgcodecs.imread(Path);
            if(Image.dataAddr()==0)
            {
                System.out.println("Couldn't open file " + Path);
            }
            else{
                ImageViewer IV = new ImageViewer();
                IV.show(Image, "Loaded Image");
                LogTxt.append("Image Loaded : "+ Path+"\n");
            }
        }
    }//GEN-LAST:event_LoadBtnActionPerformed

    private void PreprocessingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PreprocessingActionPerformed
        // TODO add your handling code here:
        // Image padding jika ukuran gambar tidak habis dibagi 8
        int top=0,bottom=0,left=0,right=0;
        int border;
        Scalar value  = new Scalar(0,0,0);
        
        int width = Image.width();
        int height = Image.height();
        int sx = width%8;
        int sy = height%8;
        border = BORDER_CONSTANT;
        Pre = Image;
       
        if(sx!=0)
        {
            switch (sx)
            {
                case 1:
                {
                   left = 3;
                   right = 4;
                   break;
                }
                case 2:
                {
                    left = 3;
                    right = 3;
                    break;
                }
                case 3:
                {
                    left = 2;
                    right = 3;
                    break;
                }
                case 4:
                {
                    left = 2;
                    right = 2;
                    break;
                }
                case 5:
                {
                    left = 1;
                    right =2;
                    break;
                }
                case 6:
                {
                    left = 1;
                    right = 1;
                    break;
                }
                case 7:
                {
                    left = 0;
                    right = 1;
                }
            }
            
        }
        if (sy !=0)
        {
             switch (sy)
            {
                case 1:
                {
                   top = 3;
                   bottom = 4;
                   break;
                }
                case 2:
                {
                    top = 3;
                    bottom = 3;
                    break;
                }
                case 3:
                {
                    top = 2;
                    bottom = 3;
                    break;
                }
                case 4:
                {
                    top = 2;
                    bottom = 2;
                    break;
                }
                case 5:
                {
                    top = 1;
                    bottom =2;
                    break;
                }
                case 6:
                {
                    top = 1;
                    bottom = 1;
                    break;
                }
                case 7:
                {
                    top = 0;
                    bottom = 1;
                }
            }            
        }
        Core.copyMakeBorder(Image, Pre, top, bottom, left, right, border, value);
        LogTxt.append("Image Padded: Top ="+top+" ,Bottom ="+bottom+" ,Left ="+left+" ,Right ="+right+"\n");
         ImageViewer IV = new ImageViewer();
         IV.show(Pre, "Preprocessed Image");
        
    }//GEN-LAST:event_PreprocessingActionPerformed

    private void GenBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenBtnActionPerformed
        // TODO add your handling code here:
        
        BitSize = (String)JOptionPane.showInputDialog(this, "Masukkan Ukuran Bit", "Bit Size", JOptionPane.QUESTION_MESSAGE);
        List<Mat> bgr = new ArrayList<>();
        List<Mat> rekons = new ArrayList<>();
         TLDC = new TwoLevDCTGenerate[3];
         long start = System.nanoTime();
         Core.split(Pre,bgr);
        
        //double [][][]Dequan = new double[H*W][4][4];
        //double[][][] Dnorm = new double[H*W][4][4];
        int range = (int) Math.pow(2, Integer.parseInt(BitSize));
        Mat Result;
        Ext = new Mat();
         for(int i=0;i<bgr.size();i++)
         {
             TLDC[i]=new TwoLevDCTGenerate();
             TLDC[i].setSize(Integer.parseInt(BitSize));
             TLDC[i].setMat(bgr.get(i));
             TLDC[i].Generate();
             MF.setMax(TLDC[i].getMax(), i);
             MF.setMin(TLDC[i].getMin(), i);
         }
         long end = System.nanoTime();
         // Added for Revision
         for(int i=0;i<bgr.size();i++)
         {
            byte[][][] watermark = TLDC[i].getWatermark();
            double[][][]Dequan = new double[watermark.length*watermark[0].length][4][4];
            double[][][]Dnorm = new double[watermark.length*watermark[0].length][4][4];
            MatRec = new Mat[watermark.length*watermark[0].length];
            //System.out.println("Size ="+ MatRec.length);
            CRTExtraction Extra = new CRTExtraction();
            int counter = 0;
            for (int x=0;x<watermark.length;x++)
            {
                for(int y=0;y<watermark[0].length;y++)
                {
                    int[][]Wat = ChangeShape(watermark[x][y]);
                    Dequan[counter]= Extra.Dequantization(Wat, range);
                    Dnorm[counter]=Extra.Denormalization(Dequan[counter], TLDC[i].getMax(),TLDC[i].getMin());
                    MatRec[counter]=Extra.InverseTLDCT(Dnorm[counter]);
                    counter++;
                }
            }
            Result = new Mat((watermark.length*8),(watermark[0].length*8),CvType.CV_32FC1);
            //System.out.println("Width = "+Result.width());
            //System.out.println("Height = "+Result.height());
            int count =0;
            for(int x=0;x<watermark.length*8;x+=8)
            {
                for(int y=0;y<watermark[0].length*8;y+=8)
                {
                Mat submat = Result.submat(new Rect(y,x,8,8));
                MatRec[count].copyTo(submat);
                //System.out.println("COunt = "+count);
                count++;
                }
            }
            Mat conv = new Mat();
            Result.convertTo(conv, CvType.CV_8UC1);
            rekons.add(conv);
           
         }
          Core.merge(rekons, Ext);        
          PrePSNR = CalculatePSNR(Pre,Ext);
          
          // ImageViewer IV = new ImageViewer();
          // IV.show(Ext, "Rekons Image");
         LogTxt.append("Finish Generating Watermark !!\n");
         LogTxt.append("Execution Time : "+(end-start)/1000000+" ms \n");
    }//GEN-LAST:event_GenBtnActionPerformed
private int[][] ChangeShape(byte[] wat)
{
    int[][] result = new int[4][4];
    int x =0;
    int y =0;        
        for(int i=0;i<wat.length;i++)
        {           
            if(i%4==0&&i>0)
            {
                x++;
                y=0;
                result[x][y] = wat[i];
                y++;
            }
            else
            {
                result[x][y] = wat[i];
                 y++;
            }            
        }
        return result;
}
    private void EmbedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmbedBtnActionPerformed
        String preKey = (String) JOptionPane.showInputDialog(this,"Key Yang Digunakan ??","KEY",JOptionPane.QUESTION_MESSAGE);
        //String S1 = (String) JOptionPane.showInputDialog(this,"Nilai S1 ??","S1",JOptionPane.QUESTION_MESSAGE);
        //String S2 = (String) JOptionPane.showInputDialog(this,"Nilai S2 ??","S2",JOptionPane.QUESTION_MESSAGE);
        this.Key = preKey;
        Emb = new Mat();
        CRTEmbedding Chinese = new CRTEmbedding();
        Chinese.setKey(Long.parseLong(preKey));
        Chinese.setBit(Integer.parseInt(BitSize));
        //Chinese.setS1(Integer.parseInt(S1));
        //Chinese.setS2(Integer.parseInt(S2));
        List<Mat> bgr = new ArrayList<>();
        List<Mat> embedded = new ArrayList<>();
        long start = System.nanoTime();
        Core.split(Pre, bgr);
        for(int i=0;i<bgr.size();i++)
        {
            Mat Part = Chinese.embedding(bgr.get(i),TLDC[i].getWatermark());
            embedded.add(Part);
        }
        Core.merge(embedded, Emb);
        long end = System.nanoTime();
        ImageViewer IV = new ImageViewer();
        IV.show(Emb, "Embedded Image");
        LogTxt.append("Finish Embedding Watermark !!\n");
        LogTxt.append("Execution Time : "+(end-start)/1000000+" ms \n");
        // TODO add your handling code here:
    }//GEN-LAST:event_EmbedBtnActionPerformed

    private void SaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveBtnActionPerformed
        // TODO add your handling code here:
        final JFileChooser JF = new JFileChooser();
        MatOfInt param = new MatOfInt(Imgcodecs.CV_IMWRITE_JPEG_QUALITY,90);
        
        
        MF.setBit(Integer.parseInt(BitSize));
        MF.setKey(Long.parseLong(Key));
        MF.setPSNR(PrePSNR);
        String NamaFile = (String)JOptionPane.showInputDialog(this,"Masukkan nama File","Save Embedded",JOptionPane.QUESTION_MESSAGE);
        JF.setSelectedFile(new File(NamaFile));
        int returnval = JF.showSaveDialog(FormUtama.this);
        if(returnval == JFileChooser.APPROVE_OPTION)
        {
            File file  = JF.getSelectedFile();
            String Path = file.getPath();
            String MsPath = MF.arrangePath(Path);
            Imgcodecs.imwrite(Path, Emb,param);
            try
            {
                FileOutputStream fos = new FileOutputStream(MsPath);
		ObjectOutputStream oos = new ObjectOutputStream(fos);
		oos.writeObject(MF);
		oos.close();
            }
            catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
        }
        LogTxt.append("Finish Saving Embedded Image !!\n");
    }//GEN-LAST:event_SaveBtnActionPerformed

    private void LoadEmbBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadEmbBtnActionPerformed
        // TODO add your handling code here:
         final JFileChooser JF = new JFileChooser();
        JF.addChoosableFileFilter(new TextFilter());
        int returnval = JF.showOpenDialog(FormUtama.this);
        if (returnval == JFileChooser.APPROVE_OPTION)
        {
            File file  = JF.getSelectedFile();
            String Path = file.getPath();
            Image = Imgcodecs.imread(Path);
            if(Image.dataAddr()==0)
            {
                System.out.println("Couldn't open file " + Path);
            }
            else{
                ImageViewer IV = new ImageViewer();
                IV.show(Image, "Loaded Embedded Image");
                LogTxt.append("Image Embedded Loaded : "+ Path+"\n");
            }
        }
    }//GEN-LAST:event_LoadEmbBtnActionPerformed

    private void WatExtBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WatExtBtnActionPerformed
        // TODO add your handling code here:
       
       final JFileChooser JF = new JFileChooser();
        JF.addChoosableFileFilter(new MiscFilter());
        int returnval = JF.showOpenDialog(FormUtama.this);
        if (returnval == JFileChooser.APPROVE_OPTION)
        {
            FileInputStream fis  = null;
           try {
               File file  = JF.getSelectedFile();
               String Path = file.getPath();
               fis = new FileInputStream(Path);
               ObjectInputStream ois = new ObjectInputStream(fis);
               MF = (MiscFile)ois.readObject();
               ois.close();
           } catch (FileNotFoundException ex) {
               Logger.getLogger(FormUtama.class.getName()).log(Level.SEVERE, null, ex);
           } catch (IOException ex) {
               Logger.getLogger(FormUtama.class.getName()).log(Level.SEVERE, null, ex);
           } catch (ClassNotFoundException ex) {
               Logger.getLogger(FormUtama.class.getName()).log(Level.SEVERE, null, ex);
           } 
            
        }
        Ext = new Mat();
        Dec = new Mat();
        CRTExtraction Extra = new CRTExtraction();
        Extra.setKey(MF.getKey());
        Extra.setBitSize(MF.getBit());
        this.PrePSNR = MF.getPSNR();
        
        List<Mat> bgr = new ArrayList<>();
        List<Mat> recon = new ArrayList<>();
        List<Mat> decom = new ArrayList<>();
        long start = System.nanoTime();
        Core.split(Image, bgr);
        for(int i=0;i<bgr.size();i++)
        {
            Extra.extraction(bgr.get(i));
            Mat Part = Extra.reconstruction(MF.getMax(i),MF.getMin(i));
            Mat PartDec = Extra.decompress(MF.getMax(i),MF.getMin(i));
            /*for(int a=0;a<Part.height();a++)
            {
                for(int b=0;b<Part.width();b++)
                {
                    System.out.println("Hasil Ekstraksi =" +Part.get(a,b)[0]);
                }
            }*/
            //Core.multiply(Part,new Scalar(-1),Part);
            Mat conv = new Mat();
            Mat conv2 = new Mat();
            Part.convertTo(conv, CvType.CV_8UC1);
            PartDec.convertTo(conv2, CvType.CV_8UC1);
            recon.add(conv);
            decom.add(conv2);
        }
        Core.merge(recon, Ext);
        Core.merge(decom, Dec);
        long end = System.nanoTime();
        ImageViewer IV = new ImageViewer();
        IV.show(Ext, "Extracted watermark Image");
        LogTxt.append("Finish Extraction !!\n");
         LogTxt.append("Execution Time : "+(end-start)/1000000+" ms \n");
    }//GEN-LAST:event_WatExtBtnActionPerformed

    private void CalcPSNRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalcPSNRActionPerformed
        // TODO add your handling code here:
        Mat Image1,Image2 ;
        Image1 = new Mat();
        Image2 = new Mat();
        final JFileChooser JF = new JFileChooser();
        JF.addChoosableFileFilter(new TextFilter());
        int returnval = JF.showOpenDialog(FormUtama.this);
        if (returnval == JFileChooser.APPROVE_OPTION)
        {
            File file  = JF.getSelectedFile();
            String Path = file.getPath();
            Image1 = Imgcodecs.imread(Path);
            if(Image1.dataAddr()==0)
            {
                System.out.println("Couldn't open file " + Path);
            }
            
        }
        returnval = JF.showOpenDialog(FormUtama.this);
        if (returnval == JFileChooser.APPROVE_OPTION)
        {
            File file  = JF.getSelectedFile();
            String Path = file.getPath();
            Image2 = Imgcodecs.imread(Path);
            if(Image2.dataAddr()==0)
            {
                System.out.println("Couldn't open file " + Path);
            }
            
        }
        double PSNR = CalculatePSNR(Image1, Image2);
        PSNRTxt.setText(String.valueOf(PSNR));
    }//GEN-LAST:event_CalcPSNRActionPerformed

    private void DetectionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DetectionBtnActionPerformed
        
        List<Mat> recon = new ArrayList<>();
        List<Mat> decom = new ArrayList<>();
        int Height = Ext.rows()/8;
        int Width = Ext.cols()/8;
        Core.split(Ext,recon);
        Core.split(Dec,decom);
        double [][][] MSER = new double[3][Height][Width]; 
        double [][] MSE = new double[Height][Width];
        for(int i=0;i<recon.size();i++)
        {
            Mat PartExt = recon.get(i);
            Mat PartDec = decom.get(i);
            double [][] PartVal = CalculateMSE(PartExt,PartDec);
            MSER[i]=PartVal;
        }
        for(int i=0;i<Height;i++)
        {
            for(int j=0;j<Width;j++)
            {
                MSE[i][j]=(MSER[0][i][j]+MSER[1][i][j]+MSER[2][i][j])/3;
            }
        }
       
        Recovery RC = new Recovery();
        RC.setKey(MF.getKey());
        
        RC.setMSE(MSE);
        RC.MSEStat();
        LogTxt.append("Minimum MSE = "+RC.getMinMSE()+"\n");
        LogTxt.append("Maximum MSE = "+RC.getMaxMSE()+"\n");
        LogTxt.append("Average MSE = "+RC.getAvgMSE()+"\n");
        String Threshold = (String) JOptionPane.showInputDialog(this,"Threshold Deteksi ??","KEY",JOptionPane.QUESTION_MESSAGE);
        double Thres = Double.parseDouble(Threshold);
        RC.setThresh(Thres);
        RC.setHeight(Height);
        RC.setWidth(Width);
        RC.Detect();
         Rec = RC.Recover(Image,Ext);
        ImageViewer IV = new ImageViewer();
        IV.show(Rec, "Recovered Image");
        LogTxt.append("Finish Detection and Recovery !!\n");
    }//GEN-LAST:event_DetectionBtnActionPerformed

    private void SaveExtractionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveExtractionActionPerformed
        // TODO add your handling code here:
        final JFileChooser JF = new JFileChooser();
        String NamaFile = (String)JOptionPane.showInputDialog(this,"Masukkan nama File","Save Extraction",JOptionPane.QUESTION_MESSAGE);
        JF.setSelectedFile(new File(NamaFile));
        int returnval = JF.showSaveDialog(FormUtama.this);
        if(returnval == JFileChooser.APPROVE_OPTION)
        {
            File file  = JF.getSelectedFile();
            String Path = file.getPath();            
            Imgcodecs.imwrite(Path, Ext);           
        }
    }//GEN-LAST:event_SaveExtractionActionPerformed

    private void SaveRecoveryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveRecoveryActionPerformed
        // TODO add your handling code here:
        final JFileChooser JF = new JFileChooser();
        String NamaFile = (String)JOptionPane.showInputDialog(this,"Masukkan nama File","Save Recovery",JOptionPane.QUESTION_MESSAGE);
        JF.setSelectedFile(new File(NamaFile));
        int returnval = JF.showSaveDialog(FormUtama.this);
        if(returnval == JFileChooser.APPROVE_OPTION)
        {
            File file  = JF.getSelectedFile();
            String Path = file.getPath();            
            Imgcodecs.imwrite(Path, Rec);           
        }
    }//GEN-LAST:event_SaveRecoveryActionPerformed

    private void NCCBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NCCBtnActionPerformed
        // TODO add your handling code here:
         Mat Image1,Image2 ;
        Image1 = new Mat();
        Image2 = new Mat();
        final JFileChooser JF = new JFileChooser();
        JF.addChoosableFileFilter(new TextFilter());
        int returnval = JF.showOpenDialog(FormUtama.this);
        if (returnval == JFileChooser.APPROVE_OPTION)
        {
            File file  = JF.getSelectedFile();
            String Path = file.getPath();
            Image1 = Imgcodecs.imread(Path);
            if(Image1.dataAddr()==0)
            {
                System.out.println("Couldn't open file " + Path);
            }
            
        }
        returnval = JF.showOpenDialog(FormUtama.this);
        if (returnval == JFileChooser.APPROVE_OPTION)
        {
            File file  = JF.getSelectedFile();
            String Path = file.getPath();
            Image2 = Imgcodecs.imread(Path);
            if(Image2.dataAddr()==0)
            {
                System.out.println("Couldn't open file " + Path);
            }
            
        }
        double ncc = CalculateNCC(Image1,Image2);
        NCCTxt.setText(String.valueOf(ncc));
    }//GEN-LAST:event_NCCBtnActionPerformed

    private void DetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DetBtnActionPerformed
        // TODO add your handling code here:
        double nowPSNR = CalculatePSNR(Image,Ext);
        System.out.println("Now = "+nowPSNR);
        System.out.println("Pre = "+PrePSNR);
        if((PrePSNR-nowPSNR)>0.1)
        {
            DetTxt.setText("Edited");
            DetectionBtn.setEnabled(true);
        }
        else
            DetTxt.setText("Original");
            
    }//GEN-LAST:event_DetBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormUtama().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CalcPSNR;
    private javax.swing.JButton DetBtn;
    private javax.swing.JTextField DetTxt;
    private javax.swing.JButton DetectionBtn;
    private javax.swing.JButton EmbedBtn;
    private javax.swing.JButton GenBtn;
    private javax.swing.JButton LoadBtn;
    private javax.swing.JButton LoadEmbBtn;
    private javax.swing.JTextArea LogTxt;
    private javax.swing.JButton NCCBtn;
    private javax.swing.JTextField NCCTxt;
    private javax.swing.JTextField PSNRTxt;
    private javax.swing.JButton Preprocessing;
    private javax.swing.JButton SaveBtn;
    private javax.swing.JButton SaveExtraction;
    private javax.swing.JButton SaveRecovery;
    private javax.swing.JButton WatExtBtn;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private double CalculatePSNR(Mat Image1, Mat Image2) {
         double  peakb,peakg,peakr;
         double signalb,signalg,signalr; 
         double noiseb,noiseg,noiser;
         double mseb,mseg,mser;
         int row = Image1.height();
         int col = Image1.width();
         peakb=peakg=peakr=0;
         signalb=signalg=signalr=0;
         noiseb=noiseg=noiser=0;
         for(int i=0;i<row;i++)
         {
             for(int j=0;j<col;j++)
             {
                 double[] pix1 = Image1.get(i,j);
                 double[] pix2 = Image2.get(i,j);
                 signalb+= pix1[0]*pix1[0];
                 signalg+= pix1[1]*pix1[1];
                 signalr+= pix1[2]*pix1[2];
                 noiseb+= (pix1[0]-pix2[0])*(pix1[0]-pix2[0]);
                 noiseg+= (pix1[1]-pix2[1])*(pix1[1]-pix2[1]);
                 noiser+= (pix1[2]-pix2[2])*(pix1[2]-pix2[2]);
                 if(peakb<pix1[0])
                     peakb=pix1[0];
                 if(peakg<pix1[1])
                     peakg=pix1[1];
                 if(peakr<pix1[2])
                     peakr=pix1[2];
                 
             }
         }
         mseb = noiseb/(row*col);
         mseg = noiseg/(row*col);
         mser = noiser/(row*col);
         double PSNRB = 10*log10((peakb*peakb)/mseb);
         double PSNRG = 10*log10((peakg*peakg)/mseg);
         double PSNRR = 10*log10((peakr*peakr)/mser);
         return (PSNRB+PSNRG+PSNRR)/3;
         
    }

    private double log10(double d) {
        return Math.log(d)/Math.log(10);
    }

    private double[][] CalculateMSE(Mat PartExt, Mat PartDec) {
        double[][] Result = new double[PartExt.rows()/8][PartExt.cols()/8];
        int counti=0;
        int countj=0;
        for(int i=0; i<PartExt.rows(); i+=8 ) // Separating Block to byte[]
       {
           for(int j=0;j<PartExt.cols();j+=8)
           {
                Mat blokR = new Mat(PartExt,new Rect(j,i,8,8));
                Mat blokD = new Mat(PartDec,new Rect(j,i,8,8));
                Result[counti][countj] = blokMSE(blokR,blokD);
                countj++;
           }
           counti++;
           countj=0;
       }
        return Result;
    }

    private double blokMSE(Mat blokR, Mat blokD) {
        double Result;
        int acc = 0;
        for(int i=0;i<8;i++)
        {
            for(int j=0;j<8;j++)
            {
                acc+=Math.pow((blokR.get(i, j)[0]-blokD.get(i, j)[0]),2);
            }
        }
        Result = (double)acc;
        return Result/64;
    }

    private double CalculateNCC(Mat Image1, Mat Image2) {
        int row = Image1.height();
        int col = Image1.width();
        double upB,upG,upR;
        double doB,doG,doR;
        double ncB,ncG,ncR;
        upB=upG=upR=0;
        doB=doG=doR=0;
      for (int i=0;i<row;i++ )
      {
          for(int j=0;j<col;j++)
          {
              double[] pix1 = Image1.get(i,j);
              double[] pix2 = Image2.get(i,j);
              upB+= pix1[0]*pix2[0];
              upG+= pix1[1]*pix2[1];
              upR+= pix1[2]*pix2[2];
              doB+= pix1[0]*pix1[0];
              doG+= pix1[1]*pix1[1];
              doR+= pix1[2]*pix1[2];              
          }
      }
      ncB = upB/doB;
      ncG = upG/doG;
      ncR = upR/doR;
      return (ncB+ncG+ncR)/3;
    }
}
